import os
import httpx
import unicodedata
from fastapi import FastAPI, Request, HTTPException
from dataclasses import dataclass, field
from typing import List, Dict

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "secret123")
TELEGRAM_API = f"https://api.telegram.org/bot{BOT_TOKEN}"

app = FastAPI()

# --------- –í—Å–ø–æ–º–æ–≥–∞–ª–∫–∏ ----------
def norm(s: str) -> str:
    s = unicodedata.normalize("NFKC", (s or "")).strip().lower()
    s = s.replace("—ë", "–µ")
    return s

async def tg(method: str, json: dict):
    async with httpx.AsyncClient(timeout=15) as cl:
        r = await cl.post(f"{TELEGRAM_API}/{method}", json=json)
        r.raise_for_status()
        return r.json()

async def say(chat_id: int, text: str):
    await tg("sendMessage", {"chat_id": chat_id, "text": text, "parse_mode": "Markdown"})

async def pic(chat_id: int, url: str, caption: str):
    # –µ—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –≤—Å—ë —Ä–∞–≤–Ω–æ –ø—Ä–∏—à–ª—ë–º —Ç–µ–∫—Å—Ç
    try:
        await tg("sendPhoto", {"chat_id": chat_id, "photo": url, "caption": caption, "parse_mode": "Markdown"})
    except Exception:
        await say(chat_id, caption)

# --------- –°—Ü–µ–Ω—ã (–∫–∞—Ä—Ç–∏–Ω–∫–∏ –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏–º–∏ URL) ----------
SCENE = {
    1:  {"img": "https://images.unsplash.com/photo-1501785888041-af3ef285b470", "caption": "üå≤ *–ö–æ–º–Ω–∞—Ç–∞ 1 ‚Äî –í—Ä–∞—Ç–∞ –¥–µ—Ä–µ–≤–Ω–∏*\n–ö —Å–µ–≤–µ—Ä—É —Ç—è–Ω–µ—Ç –¥–æ—Ä–æ–≥–∞ –∏ –∑–∞–ø–∞—Ö –¥—ã–º–∞. –ù–∞–ø–∏—à–∏: *–≥–æ—Ç–æ–≤*."},
    2:  {"img": "https://images.unsplash.com/photo-1500530855697-b586d89ba3ee", "caption": "üë£ *–ö–æ–º–Ω–∞—Ç–∞ 2 ‚Äî –°–ª–µ–¥—ã –≤ –≥—Ä—è–∑–∏*\n–°–ª–µ–¥ —É–≤–æ–¥–∏—Ç –≤ —á–∞—â—É. –ö—É–¥–∞ –∏–¥—ë—à—å? –ù–∞–ø–∏—à–∏: *–Ω–∞–ª–µ–≤–æ* –∏–ª–∏ *–Ω–∞–ø—Ä–∞–≤–æ*."},
    3:  {"img": "https://images.unsplash.com/photo-1617191519009-8f6a0c2e6c7f", "caption": "‚òÄÔ∏è *–ö–æ–º–Ω–∞—Ç–∞ 3 ‚Äî –†—É–Ω–∞ –°–æ–ª–Ω—Ü–∞*\n¬´–¢–æ, —á—Ç–æ —Ä–µ–∂–µ—Ç —Ç—å–º—É¬ª. –û–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: _..._"},
    4:  {"img": "https://images.unsplash.com/photo-1509043759401-136742328bb3", "caption": "üåø *–ö–æ–º–Ω–∞—Ç–∞ 4 ‚Äî –õ–µ—à–∏–π*\n–®—ë–ø–æ—Ç—ã –≤–µ—Ç–≤–µ–π. –ß—Ç–æ –ø—Ä–∏–º–µ–Ω–∏—à—å? *–∏–≥–Ω–∏* –∏–ª–∏ *–æ–≥–æ–Ω—å*."},
    5:  {"img": "https://images.unsplash.com/photo-1520256862855-398228c41684", "caption": "üåæ *–ö–æ–º–Ω–∞—Ç–∞ 5 ‚Äî –¢—Ä–∞–≤–Ω–∏–∫*\n–ù–∞–π–¥–µ–Ω—ã —Ç—Ä–∞–≤—ã. –ù–∞–ø–∏—à–∏ *–≤–∑—è—Ç—å*, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –∏—Ö."},
    6:  {"img": "https://images.unsplash.com/photo-1556909190-97b8f3f2ab1b", "caption": "üß™ *–ö–æ–º–Ω–∞—Ç–∞ 6 ‚Äî –í–∞—Ä–∫–∞ –∑–µ–ª—å—è*\n–°–≤–∞—Ä–∏ –∑–µ–ª—å–µ. –ù–∞–ø–∏—à–∏: *—Å–≤–∞—Ä–∏—Ç—å*."},
    7:  {"img": "https://images.unsplash.com/photo-1504898770365-14faca6f86e1", "caption": "üí® *–ö–æ–º–Ω–∞—Ç–∞ 7 ‚Äî –¢—É–º–∞–Ω–Ω–∏–∫*\n–ú–µ—Ä—Ü–∞—é—â–∏–π —Å–∏–ª—É—ç—Ç. –ß—Ç–æ —Å–¥–µ–ª–∞–µ—à—å? *–≤—ã–ø–∏—Ç—å –∑–µ–ª—å–µ* –∏–ª–∏ *–∏–≥–Ω–∏*."},
    8:  {"img": "https://images.unsplash.com/photo-1504196606672-aef5c9cefc92", "caption": "üß© *–ö–æ–º–Ω–∞—Ç–∞ 8 ‚Äî –ó–∞–≥–∞–¥–∫–∞ –ª—É–∫–∞*\n¬´–°–∏–¥–∏—Ç –¥–µ–¥, –≤–æ —Å—Ç–æ —à—É–± –æ–¥–µ—Ç¬ª. –û—Ç–≤–µ—Ç:"},
    9:  {"img": "https://images.unsplash.com/photo-1549880338-65ddcdfd017b", "caption": "ü™¨ *–ö–æ–º–Ω–∞—Ç–∞ 9 ‚Äî –°–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü–∞*\n–ö–æ–ª–æ–≤–æ—Ä–æ—Ç–Ω—ã–π –∞–º—É–ª–µ—Ç –Ω–∞ –ø—å–µ–¥–µ—Å—Ç–∞–ª–µ. –ù–∞–ø–∏—à–∏ *–≤–∑—è—Ç—å*."},
    10: {"img": "https://images.unsplash.com/photo-1519681393784-d120267933ba", "caption": "‚ùÑÔ∏è *–ö–æ–º–Ω–∞—Ç–∞ 10 ‚Äî –ú–æ—Ä–æ–∑–Ω–∏—Ü–∞*\n–õ–µ–¥—è–Ω–æ–π –¥—É—Ö —Ö–æ–ª–æ–¥–∏—Ç –∫—Ä–æ–≤—å. –ü–æ–∫–∞–∂–∏ *–∞–º—É–ª–µ—Ç*."},
    11: {"img": "https://images.unsplash.com/photo-1519710164239-da123dc03ef4", "caption": "‚öíÔ∏è *–ö–æ–º–Ω–∞—Ç–∞ 11 ‚Äî –ö—É–∑–Ω–∏—Ü–∞*\n–ù–∞ –Ω–∞–∫–æ–≤–∞–ª—å–Ω–µ –ª–µ–∂–∏—Ç —Å–ª–∏—Ç–æ–∫. –ù–∞–ø–∏—à–∏ *–≤–∑—è—Ç—å*, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å *—Å–µ—Ä–µ–±—Ä—è–Ω—ã–π –∫–ª–∏–Ω–æ–∫*."},
    12: {"img": "https://images.unsplash.com/photo-1482192505345-5655af888cc4", "caption": "üê∫ *–ö–æ–º–Ω–∞—Ç–∞ 12 ‚Äî –í–æ–ª–∫–æ–ª–∞–∫*\n–í–æ–µ—Ç —É –∫—É—Ä–≥–∞–Ω–∞. –ß–µ–º –¥–æ–±—å—ë—à—å? –ù–∞–ø–∏—à–∏: *—Å–µ—Ä–µ–±—Ä–æ* –∏–ª–∏ *–∫–ª–∏–Ω–æ–∫*."},
    13: {"img": "https://images.unsplash.com/photo-1500021802231-0a1ff452b1d1", "caption": "‚úÇÔ∏è *–ö–æ–º–Ω–∞—Ç–∞ 13 ‚Äî –ó–∞–≥–∞–¥–∫–∞*\n¬´–î–≤–∞ –∫–æ–ª—å—Ü–∞, –¥–≤–∞ –∫–æ–Ω—Ü–∞, –ø–æ—Å—Ä–µ–¥–∏–Ω–µ –≥–≤–æ–∑–¥–∏–∫¬ª ‚Äî –æ—Ç–≤–µ—Ç:"},
    14: {"img": "https://images.unsplash.com/photo-1501785888041-af3ef285b470", "caption": "üîµ *–ö–æ–º–Ω–∞—Ç–∞ 14 ‚Äî –ë–æ–ª–æ—Ç–Ω—ã–µ –æ–≥–æ–Ω—å–∫–∏*\n–ú–∞–Ω—è—Ç –≤ —Ç—Ä—è—Å–∏–Ω—É. –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: *–≤–µ—Ä–Ω—É—Ç—å—Å—è*."},
    15: {"img": "https://images.unsplash.com/photo-1501785888041-af3ef285b470?ixid=fakel", "caption": "üî• *–ö–æ–º–Ω–∞—Ç–∞ 15 ‚Äî –ü–µ—â–µ—Ä–∞ —É –≤—Ö–æ–¥–∞*\n–§–∞–∫–µ–ª —É —Å—Ç–µ–Ω—ã. –ù–∞–ø–∏—à–∏ *–≤–∑—è—Ç—å*."},
    16: {"img": "https://images.unsplash.com/photo-1454179083322-198bb4daae1b", "caption": "üåë *–ö–æ–º–Ω–∞—Ç–∞ 16 ‚Äî –°–ø–ª–æ—à–Ω–∞—è —Ç—å–º–∞*\n–ó–∞–∂–≥–∏ –ø—É—Ç—å: –Ω–∞–ø–∏—à–∏ *—Ñ–∞–∫–µ–ª* –∏–ª–∏ *–∑–∞–∂–µ—á—å*."},
    17: {"img": "https://images.unsplash.com/photo-1469474968028-56623f02e42e", "caption": "üêâ *–ö–æ–º–Ω–∞—Ç–∞ 17 ‚Äî –ó–º–µ–π –ø–æ–¥ —Å–≤–æ–¥–æ–º*\n–í–æ–∑–¥—É—Ö –¥—Ä–æ–∂–∏—Ç. –¢–≤–æ–π —Ö–æ–¥: *–∞–∞—Ä–¥* –∏–ª–∏ *–≤–µ—Ç–µ—Ä*."},
    18: {"img": "https://images.unsplash.com/photo-1494738073002-80e2b34f3f49", "caption": "üß† *–ö–æ–º–Ω–∞—Ç–∞ 18 ‚Äî –ó–∞–≥–∞–¥–∫–∞ –≤—Ä–µ–º–µ–Ω–∏*\n¬´–£—Ç—Ä–æ–º –Ω–∞ —á–µ—Ç—ã—Ä—ë—Ö, –¥–Ω—ë–º –Ω–∞ –¥–≤—É—Ö, –≤–µ—á–µ—Ä–æ–º –Ω–∞ —Ç—Ä—ë—Ö¬ª. –û—Ç–≤–µ—Ç:"},
    19: {"img": "https://images.unsplash.com/photo-1482192505345-5655af888cc4?ixid=fakel", "caption": "‚õ® *–ö–æ–º–Ω–∞—Ç–∞ 19 ‚Äî –ê–ª—Ç–∞—Ä—å*\n–°–∫–∞–∂–∏ —Å–ª–æ–≤–æ, —á—Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∫—Ä—É–≥ –∏ –∑–∞—â–∏—â–∞–µ—Ç –∫—Ä–∞–π: *–∫–æ–ª–æ–≤—Ä–∞—Ç*."},
    20: {"img": "https://images.unsplash.com/photo-1519681393784-d120267933ba?ixid=fakel", "caption": "üèÅ *–ö–æ–º–Ω–∞—Ç–∞ 20 ‚Äî –§–∏–Ω–∞–ª*\n–ó–ª–æ —Ä–∞—Å—Å–µ—è–Ω–æ. –¢—ã –ø–æ–ª—É—á–∞–µ—à—å —Ç—Ä–æ—Ñ–µ–π –∏ —Å–ª–∞–≤—É. –ù–∞–ø–∏—à–∏ */start*, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Å–Ω–æ–≤–∞."},
}

# --------- –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ (–≤ –ø–∞–º—è—Ç–∏) ----------
@dataclass
class Session:
    hp: int = 5
    stage: int = 1
    inventory: List[str] = field(default_factory=list)
    finished: bool = False

SESS: Dict[int, Session] = {}

def sget(uid: int) -> Session:
    if uid not in SESS:
        SESS[uid] = Session()
    return SESS[uid]

async def show_stage(chat_id: int, stage: int):
    sc = SCENE[stage]
    await pic(chat_id, sc["img"], sc["caption"])

# --------- –ü—Ä–∞–≤–∏–ª–∞ —É—Ä–æ–≤–Ω–µ–π ----------
def has(inv: List[str], item: str) -> bool:
    return any(norm(x) == norm(item) for x in inv)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞; –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (ok, hint, inventory_change)
def check(stage: int, t: str, inv: List[str]):
    t = norm(t)
    ok = False
    hint = None
    gain = None
    use = None

    if stage == 1:
        ok = (t == "–≥–æ—Ç–æ–≤")
        hint = "–ù–∞–ø–∏—à–∏ *–≥–æ—Ç–æ–≤*."
    elif stage == 2:
        ok = (t == "–Ω–∞–ª–µ–≤–æ")
        hint = "–°–ª–µ–¥ —É—Ö–æ–¥–∏—Ç –Ω–∞–ª–µ–≤–æ."
    elif stage == 3:
        ok = (t == "—Å–≤–µ—Ç")
        hint = "–¢–æ, —á—Ç–æ —Ä–µ–∂–µ—Ç —Ç—å–º—É."
    elif stage == 4:
        ok = t in ("–∏–≥–Ω–∏", "–æ–≥–æ–Ω—å")
        hint = "–õ–µ—à–∏–π –±–æ–∏—Ç—Å—è –æ–≥–Ω—è ‚Äî *–∏–≥–Ω–∏*."
    elif stage == 5:
        ok = t.startswith("–≤–∑—è—Ç—å")
        gain = "—Ç—Ä–∞–≤—ã"
        hint = "–ù–∞–ø–∏—à–∏ *–≤–∑—è—Ç—å*."
    elif stage == 6:
        if has(inv, "—Ç—Ä–∞–≤—ã"):
            ok = t.startswith("—Å–≤–∞—Ä–∏—Ç—å")
            if ok: gain = "–∑–µ–ª—å–µ"
            hint = "–ï—Å–ª–∏ —Å–æ–±—Ä–∞–ª —Ç—Ä–∞–≤—ã ‚Äî –Ω–∞–ø–∏—à–∏ *—Å–≤–∞—Ä–∏—Ç—å*."
        else:
            ok = False
            hint = "–ù–µ—Ç —Ç—Ä–∞–≤. –í–µ—Ä–Ω–∏—Å—å –º—ã—Å–ª–µ–Ω–Ω–æ: –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —ç—Ç–∞–ø–µ –±—ã–ª–æ *–≤–∑—è—Ç—å* —Ç—Ä–∞–≤—ã."
    elif stage == 7:
        ok = ("–∑–µ–ª—å–µ" in t) or (t in ("–∏–≥–Ω–∏",))
        use = "–∑–µ–ª—å–µ" if "–∑–µ–ª—å–µ" in t else None
        hint = "–ú–æ–∂–Ω–æ *–≤—ã–ø–∏—Ç—å –∑–µ–ª—å–µ* –∏–ª–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å *–∏–≥–Ω–∏*."
    elif stage == 8:
        ok = (t == "–ª—É–∫")
        hint = "–î–µ–¥ –≤–æ —Å—Ç–æ —à—É–± ‚Äî —ç—Ç–æ *–ª—É–∫*."
    elif stage == 9:
        ok = t.startswith("–≤–∑—è—Ç—å")
        gain = "–∞–º—É–ª–µ—Ç"
        hint = "–ù–∞–ø–∏—à–∏ *–≤–∑—è—Ç—å*."
    elif stage == 10:
        ok = "–∞–º—É–ª–µ—Ç" in t or has(inv, "–∞–º—É–ª–µ—Ç")
        hint = "–ü–æ–∫–∞–∂–∏ *–∞–º—É–ª–µ—Ç*."
    elif stage == 11:
        ok = t.startswith("–≤–∑—è—Ç—å")
        gain = "—Å–µ—Ä–µ–±—Ä—è–Ω—ã–π –∫–ª–∏–Ω–æ–∫"
        hint = "–ù–∞–ø–∏—à–∏ *–≤–∑—è—Ç—å*."
    elif stage == 12:
        ok = ("—Å–µ—Ä–µ–±—Ä–æ" in t) or ("–∫–ª–∏–Ω–æ–∫" in t) or ("—Å–µ—Ä–µ–±—Ä—è–Ω—ã–π" in t)
        hint = "–í–æ–ª–∫–æ–ª–∞–∫ –±–æ–∏—Ç—Å—è *—Å–µ—Ä–µ–±—Ä–∞*."
    elif stage == 13:
        ok = (t == "–Ω–æ–∂–Ω–∏—Ü—ã")
        hint = "–î–≤–∞ –∫–æ–ª—å—Ü–∞, –¥–≤–∞ –∫–æ–Ω—Ü–∞‚Ä¶ ‚Äî *–Ω–æ–∂–Ω–∏—Ü—ã*."
    elif stage == 14:
        ok = (t == "–≤–µ—Ä–Ω—É—Ç—å—Å—è")
        hint = "–û–≥–æ–Ω—å–∫–∏ –∑–∞–º–∞–Ω–∏–≤–∞—é—Ç ‚Äî –ª—É—á—à–µ *–≤–µ—Ä–Ω—É—Ç—å—Å—è*."
    elif stage == 15:
        ok = t.startswith("–≤–∑—è—Ç—å")
        gain = "—Ñ–∞–∫–µ–ª"
        hint = "–ù–∞–ø–∏—à–∏ *–≤–∑—è—Ç—å*."
    elif stage == 16:
        ok = (t == "—Ñ–∞–∫–µ–ª") or ("–∑–∞–∂–µ—á—å" in t)
        hint = "–ó–∞–∂–≥–∏ *—Ñ–∞–∫–µ–ª*."
    elif stage == 17:
        ok = (t == "–∞–∞—Ä–¥") or (t == "–≤–µ—Ç–µ—Ä")
        hint = "–ü–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç –∑–Ω–∞–∫ *–ê–∞—Ä–¥* (–≤–µ—Ç–µ—Ä)."
    elif stage == 18:
        ok = (t == "—á–µ–ª–æ–≤–µ–∫")
        hint = "–≠—Ç–æ *—á–µ–ª–æ–≤–µ–∫*."
    elif stage == 19:
        ok = (t == "–∫–æ–ª–æ–≤—Ä–∞—Ç")
        hint = "–°–∫–∞–∂–∏ —Å–ª–æ–≤–æ —Å–∏–ª—ã ‚Äî *–∫–æ–ª–æ–≤—Ä–∞—Ç*."
    elif stage == 20:
        ok = True  # —Ñ–∏–Ω–∞–ª ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä —Å—Ü–µ–Ω—ã
    return ok, hint, gain, use

# --------- FastAPI ----------
@app.get("/")
def ok():
    return {"status": "ok"}

@app.post(f"/webhook/{WEBHOOK_SECRET}")
async def webhook(request: Request):
    try:
        upd = await request.json()
    except Exception:
        raise HTTPException(status_code=400, detail="invalid json")

    msg = upd.get("message") or upd.get("edited_message")
    if not msg:
        return {"ok": True}
    chat_id = msg["chat"]["id"]
    text = msg.get("text", "")
    t = norm(text)

    # –∫–æ–º–∞–Ω–¥—ã
    if t.startswith("/start"):
        SESS[chat_id] = Session()
        await pic(chat_id, SCENE[1]["img"],
                  "üõ° *–ö–æ–ª–æ–≤—Ä–∞—Ç ‚Äî –≤–µ–¥—å–º–∞–∫ –î—Ä–µ–≤–Ω–µ–π –†—É—Å–∏*\n"
                  "–°–µ–≤–µ—Ä–Ω—ã–π —É–µ–∑–¥ –∂–¥—ë—Ç —Å–ø–∞—Å–µ–Ω–∏—è. –£ —Ç–µ–±—è 5 –∂–∏–∑–Ω–µ–π, –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.\n"
                  "–ö–æ–º–∞–Ω–¥—ã: /hp /inv /help /reset\n")
        await show_stage(chat_id, 1)
        return {"ok": True}

    if t == "/help":
        await say(chat_id, "–ö–æ–º–∞–Ω–¥—ã: /start ‚Äî –∑–∞–Ω–æ–≤–æ, /hp ‚Äî –∂–∏–∑–Ω–∏, /inv ‚Äî –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å, /reset ‚Äî —Å–±—Ä–æ—Å.\n"
                           "–ü–∏—à–∏ –æ—Ç–≤–µ—Ç—ã –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–æ–π —Ñ—Ä–∞–∑–æ–π.")
        return {"ok": True}

    if t == "/hp":
        s = sget(chat_id)
        await say(chat_id, f"‚ù§ –ñ–∏–∑–Ω–∏: {s.hp} | –ö–æ–º–Ω–∞—Ç–∞: {s.stage}/20")
        return {"ok": True}

    if t == "/inv":
        s = sget(chat_id)
        inv = ", ".join(s.inventory) if s.inventory else "–ø—É—Å—Ç–æ"
        await say(chat_id, f"üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: {inv}")
        return {"ok": True}

    if t == "/reset":
        SESS[chat_id] = Session()
        await say(chat_id, "–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω.")
        await show_stage(chat_id, 1)
        return {"ok": True}

    # –∏–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
    s = sget(chat_id)
    if s.finished:
        await say(chat_id, "–ö–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        return {"ok": True}

    ok, hint, gain, use = check(s.stage, t, s.inventory)

    if ok:
        # –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ / –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        if use:
            # —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫ ‚Äî —É–±–∏—Ä–∞–µ–º
            s.inventory = [x for x in s.inventory if norm(x) != norm(use)]
        if gain:
            if not has(s.inventory, gain):
                s.inventory.append(gain)

        # –ø–µ—Ä–µ—Ö–æ–¥ –≤–ø–µ—Ä—ë–¥
        if s.stage < 20:
            s.stage += 1
            await show_stage(chat_id, s.stage)
        else:
            s.finished = True
            await show_stage(chat_id, 20)
        return {"ok": True}

    # –Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç
    s.hp -= 1
    if s.hp <= 0:
        s.finished = True
        await say(chat_id, "üíÄ –ñ–∏–∑–Ω–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. /start ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    else:
        await say(chat_id, f"–ù–µ —Ç–æ. –ü–æ–¥—Å–∫–∞–∑–∫–∞: {hint}\n‚ù§ –û—Å—Ç–∞–ª–æ—Å—å –∂–∏–∑–Ω–µ–π: {s.hp}")
        # –ø–æ–≤—Ç–æ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ü–µ–Ω—ã (–¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞)
        await show_stage(chat_id, s.stage)

    return {"ok": True}
