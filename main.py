import os
import asyncio
import logging

from fastapi import FastAPI
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

import uvicorn

# ------------ –õ–û–ì–ò ------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
log = logging.getLogger("quest-bot")

# ------------ –ù–ê–°–¢–†–û–ô–ö–ò ------------
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
if not BOT_TOKEN or len(BOT_TOKEN) < 30:
    # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–ø—É—Å–∫, —á—Ç–æ–±—ã –≤ –ª–æ–≥–∞—Ö –±—ã–ª–æ —è—Å–Ω–æ, —á—Ç–æ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞
    raise RuntimeError("Environment variable BOT_TOKEN is missing or invalid.")

PORT = int(os.getenv("PORT", "10000"))  # Render –ø–µ—Ä–µ–¥–∞—ë—Ç PORT

# ------------ HTTP-–°–ï–†–í–ï–† (–¥–ª—è Render) ------------
app = FastAPI(title="QuestBot HTTP")

@app.get("/")
async def root():
    return {"ok": True, "app": "quest-bot", "status": "running"}

@app.get("/healthz")
async def health():
    return {"status": "healthy"}

# ------------ TELEGRAM-–ë–û–¢ ------------
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ö–æ–ª–æ–≤—Ä–∞—Ç ‚Äî –≤–µ–¥—å–º–∞–∫ –î—Ä–µ–≤–Ω–µ–π –†—É—Å–∏.\n\n"
        "–≠—Ç–æ –¥–µ–º–æ-–±–æ—Ç: —è –∂–∏–≤, –æ—Ç–≤–µ—á–∞—é –∏ –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n"
        "/ping ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–∫–ª–∏–∫\n"
    )
    await message.answer(text)

@dp.message_handler(commands=["help"])
async def cmd_help(message: types.Message):
    await message.answer("–ü–æ–∫–∞ —á—Ç–æ —Ç—É—Ç –¥–µ–º–æ. –ù–æ —Å–µ—Ä–≤–µ—Ä –∏ –±–æ—Ç —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ ‚úÖ")

@dp.message_handler(commands=["ping"])
async def cmd_ping(message: types.Message):
    await message.answer("pong")

@dp.message_handler()
async def echo_fallback(message: types.Message):
    await message.answer("–Ø –Ω–∞ —Å–≤—è–∑–∏. –ò—Å–ø–æ–ª—å–∑—É–π /help –∏–ª–∏ /ping üòâ")

# ------------ –ó–ê–ü–£–°–ö ------------
async def run_bot():
    """
    –ó–∞–ø—É—Å–∫–∞–µ–º polling aiogram –≤ —ç—Ç–æ–º –∂–µ –ø—Ä–æ—Ü–µ—Å—Å–µ.
    """
    log.info("Starting Telegram bot polling...")
    # skip_updates=True ‚Äî –Ω–∞ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∞–ø–¥–µ–π—Ç—ã
    executor.start_polling(dp, skip_updates=True)

async def run_http():
    """
    –ü–æ–¥–Ω–∏–º–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä Uvicorn –Ω–∞ –ø–æ—Ä—Ç—É, –∫–æ—Ç–æ—Ä—ã–π –¥–∞—ë—Ç Render.
    """
    log.info(f"Starting HTTP server on 0.0.0.0:{PORT} ...")
    config = uvicorn.Config(app=app, host="0.0.0.0", port=PORT, log_level="info", loop="asyncio")
    server = uvicorn.Server(config)
    await server.serve()

async def main():
    """
    –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –∏ –±–æ—Ç–∞, –∏ HTTP-—Å–µ—Ä–≤–µ—Ä.
    """
    # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç–∞—Å–∫–µ, —á—Ç–æ–±—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–ª polling
    http_task = asyncio.create_task(run_http())

    # polling ‚Äî –±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤ (aiogram 2.x). –ó–∞–ø—É—Å—Ç–∏–º –µ–≥–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ,
    # —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–≤–µ–Ω—Ç-–ª—É–ø, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤ —Ç–µ–∫—É—â–µ–º –ø–æ—Ç–æ–∫–µ.
    # –ù–∞–¥—ë–∂–Ω–µ–µ ‚Äî –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ç—Ä–µ–¥–µ:
    loop = asyncio.get_running_loop()
    await loop.run_in_executor(None, run_bot)

    # –ï—Å–ª–∏ polling –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è (–æ–±—ã—á–Ω–æ ‚Äî —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏), –¥–æ–∂–º—ë–º HTTP
    await http_task

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        log.info("Shutting down...")
